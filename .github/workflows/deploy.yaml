name: "Deploy"

on:
  workflow_call:
    inputs:
      docker-registry:
        description: "Docker registry"
        required: false
        default: "europe-west4-docker.pkg.dev"
        type: "string"
      docker-project-id:
        description: "Docker project id"
        required: false
        default: "rtbhouse-apps"
        type: "string"
      docker-repository-id:
        description: "Docker repository id"
        required: true
        type: "string"
      docker-image-name:
        description: "Docker image name"
        required: true
        type: "string"
      docker-registry-username:
        description: "Username for docker registry"
        required: false
        default: "_json_key"
        type: "string"
      context-dir:
        description: "Component context dir"
        required: false
        default: "."
        type: "string"
      component:
        description: "Component name"
        required: true
        type: "string"
      deployment-repo:
        description: "Deployment repository"
        required: false
        type: "string"
      deployment-repo-path:
        description: "Path in deployment repo"
        required: false
        default: "."
        type: "string"
      deployment-env:
        description: "Deploy to environment"
        required: true
        type: "string"
    secrets:
      docker-registry-password:
        description: "Password for docker registry"
        required: true
      gcp-sa-key:
        description: "Google Service Account JSON Key"
        required: true
      github-pat:
        description: "GitHub Personal Access Token"
        required: true

defaults:
  run:
    shell: "bash"

jobs:
  prepare:
    name: "Prepare"
    runs-on: "ubuntu-latest"
    outputs:
      docker-image: "${{ inputs.docker-registry }}/${{ inputs.docker-project-id }}/${{ inputs.docker-repository-id }}/${{ inputs.docker-image-name }}"
      docker-tag: "${{ steps.set-variables.outputs.docker-tag }}"
      sha-short: "${{ steps.set-variables.outputs.sha-short }}"
      deployment-repo: "${{ steps.set-variables.outputs.deployment-repo }}"

    steps:
      - name: "Set variables"
        id: "set-variables"
        uses: "actions/github-script@v5"
        with:
          script: |
            const shaShort = context.sha.substring(0, 7);
            const dockerTag = (()=> {
              if (!/^refs\/heads\//.test(context.ref)) {
                return "sha-" + shaShort;
              } else {
                return context.ref.replace(/^refs\/heads\//g, '').replace(/[^a-zA-Z0-9._-]+/g, '-') + "-sha-" + shaShort;
              }
            })();
            const deploymentRepo = (() => {
              if ("${{ inputs.deployment-repo }}") {
                return context.repo.owner + "/${{ inputs.deployment-repo }}"
              } else {
                return context.repo.owner + "/" + context.repo.repo.replace(/^\w+-/, "infra-");
              }
            })();

            core.setOutput("sha-short", shaShort);
            core.setOutput("docker-tag", dockerTag);
            core.setOutput("deployment-repo", deploymentRepo);

  build-image:
    name: "Build docker image"
    runs-on: "self-hosted"
    needs: ["prepare"]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Set docker prod image metadata"
        id: "docker-metadata"
        uses: "docker/metadata-action@v3"
        with:
          images: |
            ${{ needs.prepare.outputs.docker-image }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ needs.prepare.outputs.docker-tag }}
            type=sha

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v1"

      - name: "Login to Docker Registry"
        uses: "docker/login-action@v1"
        with:
          registry: "${{ inputs.docker-registry }}"
          username: "${{ inputs.docker-registry-username }}"
          password: "${{ secrets.docker-registry-password }}"

      - name: "Add uid and gid env vars"
        id: "set-uid-gid"
        run: |
          echo "::set-output name=uid::`id -u`"
          echo "::set-output name=gid::`id -g`"

      - name: "Build Docker image"
        uses: "docker/build-push-action@v2"
        with:
          context: "${{ inputs.context-dir }}"
          build-args: |
            UID=${{ steps.set-uid-gid.outputs.uid }}
            GID=${{ steps.set-uid-gid.outputs.gid }}
            VERSION=${{ needs.prepare.outputs.sha-short }}
          target: "prod"
          push: true
          tags: "${{ steps.docker-metadata.outputs.tags }}"
          labels: "${{ steps.docker-metadata.outputs.labels }}"
          cache-from: "type=registry,ref=${{ needs.prepare.outputs.docker-image }}:buildcache"

  deploy:
    name: "Deploy"
    runs-on: "ubuntu-latest"
    needs: ["prepare", "build-image"]

    steps:
      - name: "Checkout deployment repo"
        uses: "actions/checkout@v2"
        with:
          repository: "${{ needs.prepare.outputs.deployment-repo }}"
          token: "${{ secrets.github-pat }}"

      - name: "Install yaml parser"
        run: |
          npm install yaml

      - name: "Set image tags"
        uses: "actions/github-script@v5"
        with:
          script: |
            const fs = require("fs");
            const YAML = require("yaml");
            const { Pair } = require("yaml/types");

            const filePath = "${{ inputs.deployment-repo-path }}/${{ inputs.deployment-env }}/values.yaml";
            const file = fs.readFileSync(filePath, "utf8");

            document = YAML.parseDocument(file);
            const component = document.get("panel").get("components").get("${{ inputs.component }}");

            component.get("image").set("tag", "${{ needs.prepare.outputs.docker-tag }}");

            const appCodeReference = ("${{ inputs.deployment-env }}" == "production") ? context.sha : context.ref;
            if (component.has("appCodeReference")) {
              component.set("appCodeReference", appCodeReference);
            } else {
              const pos = component.items.findIndex((elem) => elem.key.value == "image");
              component.items.splice(pos, 0, new Pair("appCodeReference", appCodeReference));
            }

            fs.writeFileSync(filePath, document.toString());

      - name: "Commit and push changes"
        id: commit-changes
        run: |
          git config user.name appsjenkins
          git config user.email apps@rtbhouse.biz
          git add ${{ inputs.deployment-repo-path }}/${{ inputs.deployment-env }}/values.yaml
          git commit --allow-empty -m "ops(${{ inputs.deployment-env }}): deploy ${{ inputs.component }} version ${GITHUB_SHA}"
          git push
